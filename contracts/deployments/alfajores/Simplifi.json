{
  "address": "0xc30f5699F74219f04a7b474E6A064182c8067305",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAgent",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddingUserEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressMustBeArrayOfOneAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AgentAddressIsTheSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralCoverageCannotGoBelow_100",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollaterlCoverageTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DurationExceed720HoursOrIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GettingFinanceNotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAgentAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSafe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDebtFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyContributorIsAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyNonContributorIsAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaybackModeNotActivated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolBalanceNotTally",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsTaken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeBalanceDepleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAddressIsTheSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenBalanceInSafeNotTally",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TurnTimeHasNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserArrayExceedOne",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "_getSafe",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ownerHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Common.Safe",
          "name": "safe",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "user",
          "type": "address[]"
        }
      ],
      "name": "addUserToPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isMember",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "payDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "turnTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loan",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "colBals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sentQuota",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSafe",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "intRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        }
      ],
      "name": "createPermissionedPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSafe",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "quorum",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "intRate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "durationInHours",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "colCoverage",
          "type": "uint24"
        }
      ],
      "name": "createPermissionlessPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getCollateralQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCurrentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFinance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contributor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creator",
              "type": "uint256"
            }
          ],
          "internalType": "struct Common.Point",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "getSafe",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "ownerHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Common.Safe",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "isPoolAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "isPoolVacant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pastRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "payback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAgent",
          "type": "address"
        }
      ],
      "name": "replaceAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newRate",
          "type": "uint16"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ebdc0e0fbd3ab9a1f495f762181fae4c01bedd87a897e9f1c55f47d6b1d2d06",
  "receipt": {
    "to": null,
    "from": "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "contractAddress": "0xc30f5699F74219f04a7b474E6A064182c8067305",
    "transactionIndex": 1,
    "gasUsed": "2325427",
    "logsBloom": "0x
    "blockHash": "0x7ceaaadbd072be2511721576bc5912faea5be912ced98765da8258e75999c047",
    "transactionHash": "0x9ebdc0e0fbd3ab9a1f495f762181fae4c01bedd87a897e9f1c55f47d6b1d2d06",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 38635389,
        "transactionHash": "0x9ebdc0e0fbd3ab9a1f495f762181fae4c01bedd87a897e9f1c55f47d6b1d2d06",
        "address": "0xc30f5699F74219f04a7b474E6A064182c8067305",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d7c271d20c9e323336bfc843aeb8dec23b346352"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7ceaaadbd072be2511721576bc5912faea5be912ced98765da8258e75999c047"
      }
    ],
    "blockNumber": 38635389,
    "cumulativeGasUsed": "2369185",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD7c271d20c9E323336bFC843AEb8deC23B346352",
    "0xF1450c7F1CADE2Ff5Ec70e2Ffb191107352F4720",
    "0x1C1bA5B82b93EC835A3922f2Ec91B8D93473643e"
  ],
  "numDeployments": 2,
  "solcInputHash": "03305cbcd604db376df1ab980a687d06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAgent\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddingUserEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressMustBeArrayOfOneAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentAddressIsTheSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCoverageCannotGoBelow_100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollaterlCoverageTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationExceed720HoursOrIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GettingFinanceNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAgentAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSafe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebtFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyContributorIsAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyNonContributorIsAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaybackModeNotActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolBalanceNotTally\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeBalanceDepleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAddressIsTheSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenBalanceInSafeNotTally\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TurnTimeHasNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserArrayExceedOne\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"_getSafe\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ownerHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Common.Safe\",\"name\":\"safe\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"addUserToPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colBals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sentQuota\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSafe\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"intRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"}],\"name\":\"createPermissionedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSafe\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorum\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"intRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"durationInHours\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"colCoverage\",\"type\":\"uint24\"}],\"name\":\"createPermissionlessPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getCollateralQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFinance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contributor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"}],\"internalType\":\"struct Common.Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"getSafe\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ownerHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Common.Safe\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"isPoolAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"isPoolVacant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pastRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgent\",\"type\":\"address\"}],\"name\":\"replaceAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"_getSafe(uint256)\":{\"details\":\"Returns the safe information\",\"params\":{\"unit\":\": Unit contribution\"}},\"getCurrentDebt(uint256,address)\":{\"details\":\"Return accrued debt for user up to this moment.\",\"params\":{\"unit\":\": Contribution amount.\",\"user\":\": Contributor.\"}},\"getPoint(address)\":{\"details\":\"Returns the point See _getPoint\"},\"getSafe(uint256)\":{\"details\":\"Returns the safe information See _getSafe\"},\"isPoolAvailable(uint256)\":{\"details\":\"Get pool from storage\",\"params\":{\"unit\":\": Unit contribution\"}},\"isPoolVacant(uint256)\":{\"details\":\"Check if slot is available in the pool\",\"params\":{\"unit\":\": Unit contribution\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFee(uint16)\":{\"details\":\"Adjust fee\",\"params\":{\"newRate\":\": New fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentDebt(uint256,address)\":{\"notice\":\"This is the total accrued debt between the date user was paid and now.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Simplifi.sol\":\"Simplifi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/Simplifi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"./apis/Common.sol\\\";\\r\\nimport { IERC20 } from \\\"./apis/IERC20.sol\\\";\\r\\nimport { Utils } from \\\"./libraries/Utils.sol\\\";\\r\\nimport { CreatePool } from \\\"./peripherals/CreatePool.sol\\\";\\r\\nimport { Oracle } from \\\"./peripherals/Oracle.sol\\\";\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract Simplifi is CreatePool, Oracle {\\r\\n    using SafeMath for uint256;\\r\\n    using Utils for *;\\r\\n\\r\\n    error NoDebtFound();\\r\\n    error SafeBalanceDepleted();\\r\\n    error GettingFinanceNotReady();\\r\\n    error InsufficientCollateral();\\r\\n    error TurnTimeHasNotPassed();\\r\\n    error PoolBalanceNotTally();\\r\\n    error PaybackModeNotActivated();\\r\\n\\r\\n    constructor(\\r\\n        address controller, \\r\\n        address newAgent, \\r\\n        IERC20 _token\\r\\n    ) \\r\\n        CreatePool(controller, newAgent, _token)\\r\\n    {}\\r\\n\\r\\n    function createPermissionlessPool(\\r\\n        address newSafe, \\r\\n        address[] memory users, \\r\\n        uint256 unit,\\r\\n        uint8 quorum,\\r\\n        uint16 intRate,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage\\r\\n    ) public returns(bool) {\\r\\n        _createPool(\\r\\n            newSafe, \\r\\n            users, \\r\\n            unit,\\r\\n            quorum,\\r\\n            intRate,\\r\\n            durationInHours,\\r\\n            colCoverage,\\r\\n            Common.Router.PERMISSIONLESS\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createPermissionedPool(\\r\\n        address newSafe, \\r\\n        address[] memory users, \\r\\n        uint256 unit,\\r\\n        uint16 intRate,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage\\r\\n    ) public returns(bool) {\\r\\n        _createPool(\\r\\n            newSafe, \\r\\n            users, \\r\\n            unit,\\r\\n            uint8(users.length),\\r\\n            intRate,\\r\\n            durationInHours,\\r\\n            colCoverage,\\r\\n            Common.Router.PERMISSIONED\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFinance(uint256 unit, address user) public returns(bool) {\\r\\n        Common.Pool memory _p = _getPool(unit, Common.UnitStatus.CURRENT);\\r\\n        Common.Contributor memory _c = _getExpected(unit);\\r\\n        uint256 safeBalance = _getSafe(unit).id.balance;\\r\\n        if(Utils._now() > _c.turnTime + 1 hours){\\r\\n            if(user != _c.id) {\\r\\n                _c = _swapFullProfile(unit, user, _c);\\r\\n            }\\r\\n        } else {\\r\\n            if(user != _c.id) revert TurnTimeHasNotPassed();\\r\\n        }\\r\\n        if(_p.lInt.stage != Common.Stage.GET) revert GettingFinanceNotReady();\\r\\n        if(IERC20(_getToken()).balanceOf(_getSafe(unit).id) < _p.bigInt.currentPool) revert TokenBalanceInSafeNotTally();\\r\\n        if(_p.bigInt.unit.mul(_p.lInt.quorum) < _p.bigInt.currentPool) revert PoolBalanceNotTally();\\r\\n        _onlyContributor(_c.id, unit);\\r\\n        uint fee = _p.bigInt.currentPool.computeFee(uint16(makerRate));\\r\\n        _c.colBals = _getCollateralQuote(unit);\\r\\n        if(safeBalance < _c.colBals) revert InsufficientCollateral();\\r\\n        _c.loan = _p.bigInt.currentPool.sub(fee);\\r\\n        _p.beneficiary = _c.id;\\r\\n        _p.bigInt.currentPool = 0;\\r\\n        _p.lInt.stage = Common.Stage.PAYBACK;\\r\\n        _addContributor(unit, _c);\\r\\n        _setPool(_p, unit, Common.UnitStatus.CURRENT);\\r\\n        _incrementUserCount(unit);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function payback(uint256 unit, address user) public returns(bool) {\\r\\n        Common.Pool memory _p = _getPool(unit, Common.UnitStatus.CURRENT);\\r\\n        Common.Contributor memory _c = _getProfile(user, unit);\\r\\n        if(_p.lInt.stage != Common.Stage.PAYBACK) revert PaybackModeNotActivated();\\r\\n        uint debt = _getCurrentDebt(unit, user);\\r\\n        if(debt == 0) revert NoDebtFound();\\r\\n        _c.loan = 0;\\r\\n        bool allGF = _getUserCount(unit) == _p.lInt.quorum;\\r\\n        if(!allGF){\\r\\n            _p.bigInt.currentPool = _p.bigInt.unit.mul(_p.lInt.quorum);\\r\\n            if(IERC20(_getToken()).balanceOf(_getSafe(unit).id) < _p.bigInt.currentPool) revert SafeBalanceDepleted();\\r\\n            _p.lInt.stage = Common.Stage.GET;\\r\\n            _setTurnTime(address(0), unit, Utils._now());\\r\\n            _setPool(_p, unit, Common.UnitStatus.CURRENT);\\r\\n        } else {\\r\\n            _p.lInt.stage = Common.Stage.ENDED;\\r\\n            _setPool(_p, unit, Common.UnitStatus.RECORD);\\r\\n            _removePool(unit);\\r\\n        }\\r\\n        _addContributor(unit, _c);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**@dev Return accrued debt for user up to this moment.\\r\\n     * @param unit : Contribution amount.\\r\\n     * @param user : Contributor.\\r\\n     * @notice This is the total accrued debt between the date user was paid and now.\\r\\n     */\\r\\n    function _getCurrentDebt(uint256 unit, address user) \\r\\n        internal \\r\\n        view returns(uint debt) \\r\\n    {\\r\\n        uint intPerSec = _getPool(unit, Common.UnitStatus.CURRENT).interest.intPerSec;\\r\\n        Common.Contributor memory _c = _getProfile(user, unit);\\r\\n        debt = _c.loan.add(intPerSec.mul(uint(Utils._now()).sub(_c.turnTime)));\\r\\n    } \\r\\n\\r\\n    /**@dev Return accrued debt for user up to this moment.\\r\\n     * @param unit : Contribution amount.\\r\\n     * @param user : Contributor.\\r\\n     * @notice This is the total accrued debt between the date user was paid and now.\\r\\n     */\\r\\n    function getCurrentDebt(uint256 unit, address user) \\r\\n        public \\r\\n        view returns(uint debt) \\r\\n    {\\r\\n        return _getCurrentDebt(unit, user);\\r\\n    } \\r\\n    \\r\\n    function _getCollateralQuote(uint256 unit) internal view returns(uint quote){\\r\\n        Common.Pool memory _p = _getPool(unit, Common.UnitStatus.CURRENT);\\r\\n        quote = Common.Price(_getDummyPrice(), 18).computeCollateral(uint24(_p.lInt.colCoverage), _p.bigInt.currentPool);\\r\\n    }\\r\\n\\r\\n    function getCollateralQuote(uint256 unit) public view returns(uint quote){\\r\\n       return _getCollateralQuote(unit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if slot is available in the pool\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function isPoolVacant(uint256 unit) public view returns(bool) {\\r\\n        return _getUserCount(unit) < _getPool(unit, Common.UnitStatus.CURRENT).lInt.quorum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74b13e84dc99a219841442872002b05b3fe90be50817c10a4d77763bf63516df\",\"license\":\"MIT\"},\"contracts/apis/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface Common {\\r\\n    enum Stage {\\r\\n        JOIN, \\r\\n        GET, \\r\\n        PAYBACK, \\r\\n        WITHDRAW,\\r\\n        CANCELED,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    enum Status { AVAILABLE, TAKEN }\\r\\n\\r\\n    enum UnitStatus { CURRENT, RECORD }\\r\\n\\r\\n    enum Router { PERMISSIONLESS, PERMISSIONED }\\r\\n\\r\\n    struct Safe {\\r\\n        address id;\\r\\n        bytes32 ownerHash;\\r\\n    }\\r\\n\\r\\n    struct Pool {\\r\\n        address admin;\\r\\n        address beneficiary;\\r\\n        LowInt lInt;\\r\\n        BigInt bigInt;\\r\\n        Interest interest;\\r\\n    }\\r\\n\\r\\n    struct LowInt {\\r\\n        uint quorum;\\r\\n        // uint userCount;\\r\\n        uint colCoverage;\\r\\n        uint duration;\\r\\n        Status status;\\r\\n        Router router;\\r\\n        Stage stage;\\r\\n    }\\r\\n\\r\\n    struct BigInt {\\r\\n        uint unit;\\r\\n        uint currentPool;\\r\\n        uint recordId;\\r\\n    }\\r\\n\\r\\n    struct Point {\\r\\n        uint contributor;\\r\\n        uint creator; \\r\\n    }\\r\\n\\r\\n    struct Interest {\\r\\n        uint fullInterest;\\r\\n        uint intPerSec;\\r\\n        uint intPerChoiceOfDur;\\r\\n    }\\r\\n\\r\\n      /**\\r\\n   *  @dev Data for each pool. \\r\\n   *  @param isMember : Whether user is a member or not\\r\\n   *  @param payDate: The data in future on which the borrowed fund must be retured\\r\\n   *  @param turnTime : This is a period or interval between the last received and the next.\\r\\n   *  @param loan: Total debts owed by the last fund recipient.\\r\\n   *  @param colBals: Collateral balances of the last recipient.\\r\\n   *  @param sentQuota : Whether an user/current msg.sender has received or not.\\r\\n   *  @param id : Address of the last recipient.  \\r\\n   */\\r\\n  struct Contributor {\\r\\n    bool isMember;\\r\\n    uint payDate;\\r\\n    uint turnTime;\\r\\n    uint loan;\\r\\n    uint colBals;\\r\\n    address id;\\r\\n    bool sentQuota;\\r\\n  }\\r\\n\\r\\nstruct Price {\\r\\n    uint128 price;\\r\\n    uint8 decimals;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x3878a7ed16436f4ce439b8dcd062bfe623ea1e72d4361690a69beed4989c43af\",\"license\":\"MIT\"},\"contracts/apis/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 is IERC20Metadata{\\r\\n    error NotCallable();\\r\\n    error AddressIsZero(address);\\r\\n    error NoPreviousLockDetected();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    \\r\\n    /** \\r\\n     * @dev Moves `amounts` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each transfer.\\r\\n     * Note: BE AWARE OF THE GAS COST WHEN USING THIS FUNCTION. IT INCREASES \\r\\n                RELATIVE TO THE ACCOUNTS ARRAY\\r\\n     */\\r\\n    function batchTransfer(uint[] memory amounts, address[] memory accounts) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**@dev Locks specific amount of JFT to the private ledger.\\r\\n        param: routeTo - Alternative address that funds will be sent to when panic call is made.\\r\\n        param: amount - Amount to lock.\\r\\n    */\\r\\n    function lockToken(address routeTo, uint256 amount) external returns(bool);\\r\\n\\r\\n    /**@dev Moves an 'amount' from private ledger to regular balances.\\r\\n        @param amount - Amount to unlock.\\r\\n        Note: If the lock duration was set, holder will not be able to unlock until the \\r\\n            set time has passed else they can withdraw to regular balance anytime.\\r\\n     */\\r\\n    function unlockToken(uint amount) external returns(bool);\\r\\n\\r\\n    /** @dev Returns seperate balances of @param who\\r\\n        return value will be in struct format having two values\\r\\n     */\\r\\n    function accountBalances(address who) external view returns(Balances memory);\\r\\n   \\r\\n    // /**@dev Return JFT's Metadata including the information of `who`\\r\\n    //  */\\r\\n    // function getInfo(address who) external view returns(Protected memory);\\r\\n\\r\\n    /**\\r\\n     * @dev PanicUnlock is meant to be invoked only by the Attorney.\\r\\n     * It should only be called when JFT holder has lost access to their account and they had \\r\\n     * earlier initiated a lock. The locked token is simply unlocked and sent to an escape address\\r\\n     * provided at the time the lock was activated.\\r\\n     * \\r\\n     * Note: Attorney charges a fee for doing this. \\r\\n     * @param account : Account that owns this token.\\r\\n     */\\r\\n    function panicUnlock(address account, Balances memory _bal) external returns(bool);\\r\\n\\r\\n    struct Protected {\\r\\n        uint256 value; // Total value currently locked\\r\\n        address escapeTo;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 spendable;\\r\\n        Protected locked;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint8 decimals;\\r\\n        uint256 totalSupply;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address attorney;\\r\\n        // address rewarder;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f16e22e9c3da96f41e8237352b0d826ca0421b69340e09aedae74eb222428e6\",\"license\":\"MIT\"},\"contracts/apis/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb50d28f397609626ce66bde796d1ea41ce80b047482aea9d7f228b285c619ad\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { SafeMath } from \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/utils/math/SafeMath.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    error InsufficientCollateral(uint256 actual, uint256 expected);\\r\\n    error CollateralCoverageCannotGoBelow_100();\\r\\n    error InvalidDenominator(string message);\\r\\n\\r\\n    ///@dev Requires all conditions to be true \\r\\n    function assertTrue_2(bool a, bool b, string memory errorMessage) internal pure {\\r\\n        require(a && b, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires single condition to be true \\r\\n    function assertTrue(bool condition, string memory errorMessage) internal pure {\\r\\n        require(condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    ///@dev Requires conditions to be true \\r\\n    function assertFalse(bool condition, string memory errorMessage) internal pure {\\r\\n        require(!condition, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**     @dev Calculation of percentage.\\r\\n        *   This is how we calculate percentage to arrive at expected value with \\r\\n        *   precision.\\r\\n        *   We choose a base value (numerator as 10000) repesenting a 100% of input value. This means if Alice wish to set \\r\\n        *   her interest rate to 0.05% for instance, she only need to multiply it by 100 i.e 0.05 * 100 = 5. Her input will be 5. \\r\\n        *   Since Solidity do not accept decimals as input, in our context, the minimum value to parse is '0' indicating \\r\\n        *   zero interest rate. If user wish to set interest at least, the minimum value will be 1 reprensenting 0.01%.\\r\\n        *   The minimum interest rate to set is 0.01% if interest must be set at least.\\r\\n        *   @notice To reiterate, raw interest must be multiplied by 100 before giving as input. \\r\\n        *   @param principal : The principal value on which the interest is based. Value should be in decimals.\\r\\n        *   @param interest : Interest rate. \\r\\n        *   \\r\\n        *   Rules\\r\\n        *   -----\\r\\n        *   - Principal cannot be less than base.\\r\\n        *   - Interest cannot be greater than (2 ^ 16) - 1\\r\\n    */\\r\\n    function _getPercentage(\\r\\n        uint principal, \\r\\n        uint16 interest\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns (uint _return) \\r\\n    {\\r\\n        uint16 base = _getBase(); \\r\\n        if(interest == 0 || principal == 0) return 0;\\r\\n        assertTrue(interest < type(uint16).max, \\\"Interest overflow\\\");\\r\\n        assertTrue(principal > base, \\\"Principal should be greater than 10000\\\");\\r\\n        _return = principal.mul(interest).div(base);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Percentage base\\r\\n     */\\r\\n    function _getBase() internal pure returns(uint16 base) {\\r\\n        base = 10000;\\r\\n    }\\r\\n    \\r\\n    function _decimals(address asset) internal view returns(uint8 decimals) {\\r\\n        decimals = IERC20Metadata(asset).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes collateral on the requested loan amount\\r\\n     * @param ccr : Collateral ratio. Must be multiply by 100 before parsing as input i.e if raw ccr\\r\\n     *              is 1.2, it should be rendered as 1.2 * 100 = 120.\\r\\n     * @param price : Price of Collateral token base with decimals.\\r\\n     * @param loanReqInDecimals : Total requested contribution in USD\\r\\n     * @notice Based on Simplifi mvp, loans are collaterized in XFI until we add more pairs\\r\\n     *         in the future.\\r\\n     * Example: Alice, Bob and Joe formed a band to contribute $100 each where duration is for \\r\\n     * 10 days each. Alice being the admin set ccr to 1.5 equivalent to 150% of the total sum \\r\\n     * contribution of $300. If the price of XFI as at the time of GF is $0.5/XFI, where XFI decimals\\r\\n     * is in 18, we calculate the required XFI to stake as follows:   \\r\\n     *  \\r\\n     *                    totalContribution *  (10** XFIdecimals)   |                 raw ccr\\r\\n     *   totalLoanInXFI = --------------------------------------    |    actualCCR = (1.5 * 100) * 100 = 1500\\r\\n     *                        (xfiPriceIndecimals)                  |\\r\\n     * \\r\\n     *                     totalLoanInXFI * actualCCR\\r\\n     *        XFINeeded = ----------------------------\\r\\n     *                             _getBase()\\r\\n     * \\r\\n     *  Therefore, Alice is required to stake 900XFI to GF $300 for 10 days.\\r\\n     *   \\r\\n     */\\r\\n    function computeCollateral(\\r\\n        Common.Price memory price,\\r\\n        uint24 ccr,\\r\\n        uint loanReqInDecimals\\r\\n    ) \\r\\n        internal\\r\\n        pure \\r\\n        returns(uint256 expColInNative) \\r\\n    {\\r\\n        uint8 minCCR = 100;\\r\\n        if(ccr < minCCR) revert CollateralCoverageCannotGoBelow_100();\\r\\n        uint48 _ccr = uint48(uint(ccr).mul(100));\\r\\n        uint totalLoanInNative = loanReqInDecimals.mul(10**price.decimals).div(price.price);\\r\\n        expColInNative = totalLoanInNative.mul(_ccr).div(_getBase());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Computes maker fee.\\r\\n        @param makerRate : The amount of fee (in %) charged by the platform on the principal given to a borrower.\\r\\n            Note : Raw rate must multiply by 100 to get the expected value i.e\\r\\n            if maker rate is 0.1%, it should be parsed as 0.1 * 100 = 10.\\r\\n            See `_getPercentage()`.\\r\\n        @param amount should be in decimals.\\r\\n    */\\r\\n    function computeFee(\\r\\n        uint amount, \\r\\n        uint16 makerRate\\r\\n    ) \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint mFee) \\r\\n    {\\r\\n        mFee = _getPercentage(amount, makerRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compute interest based on specified rate.\\r\\n     * @param rate : Interest rate.\\r\\n     * @param principal : Total expected contribution.\\r\\n     * \\r\\n     * Rules\\r\\n     * -----\\r\\n     * - Duration cannot exceed 30days i.e 2592000 seconds uint24 seconds\\r\\n     */\\r\\n    function computeInterestsBasedOnDuration(\\r\\n        uint principal,\\r\\n        uint16 rate,\\r\\n        uint24 fullDurationInSec\\r\\n    )\\r\\n        internal \\r\\n        pure \\r\\n        returns(Common.Interest memory _itr) \\r\\n    {\\r\\n        Common.Interest memory it;\\r\\n        require(fullDurationInSec <= _maxDurationInSec(), \\\"Utils: FullDur or DurOfChoice oerflow\\\");\\r\\n        it.fullInterest = _getPercentage(principal, rate); // Full interest for fullDurationInSec\\r\\n        if(it.fullInterest > 0) {\\r\\n            it.intPerSec = it.fullInterest.mul(1).div(fullDurationInSec);\\r\\n        }\\r\\n        _itr = it; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Max duration : 30Days, presented in seconds\\r\\n     */\\r\\n    function _maxDurationInSec() internal pure returns(uint24 max) {\\r\\n        max = 2592000;\\r\\n    }\\r\\n\\r\\n    function notZeroAddress(address target) internal pure {\\r\\n        require(target != address(0), \\\"Zero address\\\");\\r\\n    }\\r\\n\\r\\n    function _now() internal view returns(uint64 date) {\\r\\n        date = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xe3765e0ff7488425cd307d7a72f06452b98d36eaf18bb5ef7f793397172d4d11\",\"license\":\"MIT\"},\"contracts/peripherals/Agent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; \\r\\n\\r\\nabstract contract Agent is Ownable {\\r\\n    error InvalidAgentAddress();\\r\\n    error AgentAddressIsTheSame();\\r\\n\\r\\n    address private agent;\\r\\n\\r\\n    // Platform fee\\r\\n    uint public makerRate;\\r\\n\\r\\n    constructor(address controller, address newAgent) Ownable(controller){\\r\\n        agent = newAgent;\\r\\n    }\\r\\n\\r\\n    function replaceAgent(address newAgent) public onlyOwner {\\r\\n        if(newAgent == address(0)) revert InvalidAgentAddress();\\r\\n        if(newAgent == agent) revert AgentAddressIsTheSame();\\r\\n        agent = newAgent;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust fee\\r\\n     * @param newRate : New fee\\r\\n     */\\r\\n    function setFee(uint16 newRate) public onlyOwner {\\r\\n        makerRate = newRate;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x99825bdcb5c8f8a2a374fd3dbe6826e829796162e2a1b80cfcf80fade54804c1\",\"license\":\"MIT\"},\"contracts/peripherals/Contributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nabstract contract Contributor {\\r\\n    error OnlyContributorIsAllowed();\\r\\n    error OnlyNonContributorIsAllowed();\\r\\n\\r\\n    //Mapping of unit to position to contributors\\r\\n    mapping (uint256 => mapping(uint => Common.Contributor))public contributors;\\r\\n\\r\\n    // Mapping of unit to userCount\\r\\n    mapping (uint256 => uint) public userCounts;\\r\\n\\r\\n    // Mapping of user to unit to position\\r\\n    mapping (address => mapping(uint256 => uint)) public positions;\\r\\n\\r\\n    /**\\r\\n     * @dev Only contributor in a pool is allowed\\r\\n     * @param user : Target\\r\\n     * @param unit : Unit Contribution\\r\\n    */\\r\\n    function _onlyContributor(address user, uint256 unit) internal view {\\r\\n        if(!_getProfile(user, unit).isMember) revert OnlyContributorIsAllowed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only Non contributor in a pool is allowed\\r\\n     * @param user : Target\\r\\n     * @param unit : Unit Contribution\\r\\n     */\\r\\n    function _onlyNonContributor(address user, uint256 unit) internal view {\\r\\n        if(_getProfile(user, unit).isMember) revert OnlyNonContributorIsAllowed();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's profile status in a pool\\r\\n     * @param user : Target address\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getProfile(address user, uint256 unit) internal view returns(Common.Contributor memory _isMember) {\\r\\n        uint pos = positions[user][unit];\\r\\n        _isMember = contributors[unit][pos];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's profile status in a pool\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getExpected(uint256 unit) internal view returns(Common.Contributor memory _isMember) {\\r\\n        uint pos = userCounts[unit];\\r\\n        _isMember = contributors[unit][pos];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's profile status in a pool\\r\\n     * @param user : Target address\\r\\n     * @param unit : Unit contribution\\r\\n     * @param date : Date/timestamp\\r\\n     */ \\r\\n    function _setTurnTime(address user, uint256 unit, uint64 date) internal {\\r\\n        uint pos;\\r\\n        if(user == address(0)){\\r\\n            pos = userCounts[unit];\\r\\n        } else {\\r\\n            pos = positions[user][unit];\\r\\n        }\\r\\n        contributors[unit][pos].turnTime = date;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's contributorship status in a pool\\r\\n     * @param newProfile : Target profile\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _addContributor(uint256 unit, Common.Contributor memory newProfile) internal {\\r\\n        uint pos = userCounts[unit];\\r\\n        userCounts[unit] = pos + 1;\\r\\n        contributors[unit][pos] = newProfile;\\r\\n        positions[newProfile.id][unit] = pos;\\r\\n    }\\r\\n\\r\\n    function _incrementUserCount(uint256 unit) internal {\\r\\n        userCounts[unit] += 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns user's contributorship status in a pool\\r\\n     * @param user : Target address\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _removeContributor(address user, uint256 unit) internal {\\r\\n        uint pos = positions[user][unit];\\r\\n        delete contributors[unit][pos];\\r\\n        delete positions[user][unit];\\r\\n    }\\r\\n\\r\\n    function _getUserCount(uint256 unit) internal view returns(uint _count) {\\r\\n        _count = userCounts[unit];\\r\\n    }\\r\\n\\r\\n    function _resetUserCount(uint256 unit) internal {\\r\\n        userCounts[unit] = 0;\\r\\n    }\\r\\n\\r\\n    function _swapFullProfile(\\r\\n        uint256 unit,\\r\\n        address actCaller,\\r\\n        Common.Contributor memory expcData\\r\\n    )\\r\\n        internal\\r\\n        returns(Common.Contributor memory aCData) \\r\\n    {\\r\\n        uint aSlot = positions[actCaller][unit];\\r\\n        uint eSlot = positions[expcData.id][unit];\\r\\n        aCData = contributors[unit][aSlot];\\r\\n        aCData.turnTime = expcData.turnTime;\\r\\n        expcData.turnTime = 0;\\r\\n        contributors[unit][eSlot] = aCData;\\r\\n        contributors[unit][aSlot] = expcData;\\r\\n        positions[actCaller][unit] = eSlot;\\r\\n        positions[expcData.id][unit] = aSlot;\\r\\n        contributors[unit][aSlot].turnTime = expcData.turnTime;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7ea0455d4835b986ab85beb4e3feaea776a93b69678742df39a6cec7e579c82a\",\"license\":\"MIT\"},\"contracts/peripherals/CreatePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Agent } from \\\"./Agent.sol\\\";\\r\\nimport { Pools } from \\\"./Pools.sol\\\";\\r\\nimport { Safe } from \\\"./Safe.sol\\\";\\r\\nimport { Contributor } from \\\"./Contributor.sol\\\";\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\nimport { IERC20 } from \\\"../apis/IERC20.sol\\\";\\r\\nimport { TokenInUse } from \\\"./TokenInUse.sol\\\";\\r\\nimport { Point } from \\\"./Point.sol\\\";\\r\\nimport { Utils } from \\\"../libraries/Utils.sol\\\";\\r\\n\\r\\ncontract CreatePool is Agent, Pools, Safe, Point, TokenInUse, Contributor {\\r\\n    // using SafeMath for uint256;\\r\\n    using Utils for *;\\r\\n\\r\\n    error InvalidSafe();\\r\\n    error PoolIsTaken();\\r\\n    error AddressMustBeArrayOfOneAddress();\\r\\n    error CollaterlCoverageTooLow();\\r\\n    error DurationExceed720HoursOrIsZero();\\r\\n    error UserArrayExceedOne();\\r\\n    error AddingUserEnded();\\r\\n    error TokenBalanceInSafeNotTally();\\r\\n\\r\\n    constructor(\\r\\n        address controller, \\r\\n        address newAgent, \\r\\n        IERC20 _token\\r\\n    ) \\r\\n        Agent(controller, newAgent) TokenInUse(_token)\\r\\n    {}\\r\\n\\r\\n    function _createPool(\\r\\n        address newSafe, \\r\\n        address[] memory users, \\r\\n        uint256 unit,\\r\\n        uint8 quorum,\\r\\n        uint16 intRate,\\r\\n        uint16 durationInHours,\\r\\n        uint24 colCoverage,\\r\\n        Common.Router router\\r\\n    ) internal {\\r\\n        if(users.length > 1) revert AddressMustBeArrayOfOneAddress();\\r\\n        bytes32 ownerHash = _setOwnersHash(users, unit, users[0]);\\r\\n        if(_getSafe(unit).id == address(0)) {\\r\\n            if(newSafe == address(0)) revert InvalidSafe();\\r\\n            require(IERC20(_getToken()).balanceOf(newSafe) >= unit, \\\"Low Liq\\\");\\r\\n            _setSafe(Common.Safe(newSafe, ownerHash), unit); \\r\\n        }\\r\\n        if(_getPool(unit, Common.UnitStatus.RECORD).lInt.status == Common.Status.TAKEN) revert PoolIsTaken();\\r\\n        if(colCoverage < 100) revert CollaterlCoverageTooLow();\\r\\n        if(durationInHours == 0 || durationInHours > 720) revert DurationExceed720HoursOrIsZero();      \\r\\n        unchecked {\\r\\n            _setPool(\\r\\n                Common.Pool(\\r\\n                    users[0],\\r\\n                    address(0),\\r\\n                    Common.LowInt(quorum, colCoverage, durationInHours * 1 hours, Common.Status.TAKEN, router, Common.Stage.JOIN),\\r\\n                    Common.BigInt(unit, unit, _getRecordId()),\\r\\n                    (unit * quorum).computeInterestsBasedOnDuration(intRate, uint24(durationInHours))\\r\\n                ),\\r\\n                unit,\\r\\n                Common.UnitStatus.CURRENT\\r\\n            );\\r\\n        }\\r\\n        _incrementUserCount(unit);\\r\\n    }\\r\\n\\r\\n    function _setOwnersHash(\\r\\n        address[] memory addrs, \\r\\n        uint256 unit, \\r\\n        address admin\\r\\n    ) internal returns(bytes32 _hash) {\\r\\n        uint size = addrs.length;\\r\\n        for(uint i = 0; i < size; i++) {\\r\\n            address addr = addrs[i];\\r\\n            if(addr == admin){\\r\\n                _hash = keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        _hash,\\r\\n                        addr\\r\\n                    )\\r\\n                );\\r\\n            } else { \\r\\n                _hash = keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        _hash,\\r\\n                        addr,\\r\\n                        unit\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n            _setPoint(addr, 0, 2);\\r\\n            _addContributor(unit, Common.Contributor(addr == admin, 0, 0, 0, 0, addr, true));\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function addUserToPool(uint256 unit, address[] memory user) public returns(bool) {\\r\\n        Common.Pool memory _p = _getPool(unit, Common.UnitStatus.CURRENT);\\r\\n        Common.Contributor memory _c = _getProfile(user[0], unit);\\r\\n        _setOwnersHash(user, unit, address(0));\\r\\n        unchecked {\\r\\n            _p.bigInt.currentPool += unit;\\r\\n        }\\r\\n        if(_p.lInt.stage != Common.Stage.JOIN) revert AddingUserEnded();\\r\\n        if(user.length > 1) revert UserArrayExceedOne();\\r\\n        if(IERC20(_getToken()).balanceOf(_getSafe(unit).id) < _p.bigInt.currentPool) revert TokenBalanceInSafeNotTally();\\r\\n        if(_p.lInt.router == Common.Router.PERMISSIONLESS) require(!_c.isMember, \\\"User exist\\\");\\r\\n        else require(_c.isMember && !_c.sentQuota, \\\"Already sent quota\\\");\\r\\n        _incrementUserCount(unit);\\r\\n        _addContributor(unit, Common.Contributor(true, 0, 0, 0, 0, user[0], true));\\r\\n        if(_getUserCount(unit) == _p.lInt.quorum) {\\r\\n            _p.lInt.stage = Common.Stage.GET;\\r\\n            _resetUserCount(unit);\\r\\n            _setTurnTime(_p.admin, unit, Utils._now());\\r\\n            // _p.beneficiary = _p.admin;\\r\\n        }\\r\\n        _setPool(_p, unit, Common.UnitStatus.CURRENT);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setToken(IERC20 newToken) public onlyOwner {\\r\\n        _replaceToken(newToken);\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0xa5e486cacccd7b4e61bc992a00024884ca43b5606233467fe0bcd7f129e0d16c\",\"license\":\"MIT\"},\"contracts/peripherals/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nabstract contract Oracle {\\r\\n\\r\\n    // Dummy price for development purpose\\r\\n    function _getDummyPrice() \\r\\n        internal \\r\\n        pure \\r\\n        returns (uint128 _price) \\r\\n    {\\r\\n        return 10000000000000000000;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8b38b0d5f509839f111737cb67efc5288cb5fc568a3420af121831320af0068a\",\"license\":\"MIT\"},\"contracts/peripherals/Point.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nabstract contract Point {\\r\\n\\r\\n    // Mapping of unit contributors to Point struct\\r\\n    mapping (address => Common.Point) private points;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the point\\r\\n     * @param user : Contributor\\r\\n    */\\r\\n    function _getPoint(address user) internal view returns(Common.Point memory point){\\r\\n        point = points[user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the point\\r\\n     * See _getPoint\\r\\n    */\\r\\n    function getPoint(address user) public view returns(Common.Point memory){\\r\\n        return _getPoint(user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the point information\\r\\n     * @param user : Unit contribution\\r\\n     * @param contributor : Point earned as contributor;\\r\\n     * @param creator : Point earned as a creator\\r\\n    */\\r\\n    function _setPoint(address user, uint contributor, uint creator) internal virtual {\\r\\n        if(contributor > 0) points[user].contributor += contributor;\\r\\n        if(creator > 0) points[user].creator += creator;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3478e950023d4d90c754e1345794f1d09d08a6ba8f45d8edd7541f4f0a88271d\",\"license\":\"MIT\"},\"contracts/peripherals/Pools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nabstract contract Pools {\\r\\n    uint public pastRecords;\\r\\n\\r\\n    // Mapping of unit contribution to past pool\\r\\n    mapping (uint256 => mapping( Common.UnitStatus => Common.Pool)) private pools; \\r\\n\\r\\n    /**\\r\\n     * @dev Add pool to storage\\r\\n     * @param pool : A new pool that just ended\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _setPool(Common.Pool memory pool, uint256 unit, Common.UnitStatus status) internal virtual {\\r\\n        pools[unit][status] = pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove pool from storage\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _removePool(uint256 unit) internal virtual {\\r\\n        delete pools[unit][Common.UnitStatus.CURRENT];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get pool from storage\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function _getPool(uint256 unit, Common.UnitStatus status) internal view returns(Common.Pool memory) {\\r\\n        return pools[unit][status];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get pool from storage\\r\\n     * @param unit : Unit contribution\\r\\n     */\\r\\n    function isPoolAvailable(uint256 unit) public view returns(bool) {\\r\\n        return pools[unit][Common.UnitStatus.CURRENT].lInt.status == Common.Status.AVAILABLE;\\r\\n    }\\r\\n\\r\\n    function _getRecordId() internal returns(uint rId) {\\r\\n        rId = pastRecords;\\r\\n        pastRecords ++;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc716b492423376a0a7398cad040359c73106e99ce4716fb443e60896fd062ae6\",\"license\":\"MIT\"},\"contracts/peripherals/Safe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Common } from \\\"../apis/Common.sol\\\";\\r\\n\\r\\nabstract contract Safe {\\r\\n\\r\\n    // Mapping of unit contribution to Safe struct\\r\\n    mapping (uint256 => Common.Safe) private safes;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the safe information\\r\\n     * @param unit : Unit contribution\\r\\n    */\\r\\n    function _getSafe(uint256 unit) public view returns(Common.Safe memory safe){\\r\\n        safe = safes[unit];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the safe information\\r\\n     * See _getSafe\\r\\n    */\\r\\n    function getSafe(uint256 unit) public view returns(Common.Safe memory){\\r\\n        return _getSafe(unit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the safe information\\r\\n     * @param unit : Unit contribution\\r\\n     * @param safe : Safe Struct\\r\\n    */\\r\\n    function _setSafe(Common.Safe memory safe, uint256 unit) internal virtual {\\r\\n        safes[unit] = safe;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x932c626fbbd57d72f8c60a0bbc680aa63d58b587395132a8dba775b6fc67c925\",\"license\":\"MIT\"},\"contracts/peripherals/TokenInUse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"../apis/IERC20.sol\\\";\\r\\n\\r\\nabstract contract TokenInUse {\\r\\n    error InvalidTokenAddress();\\r\\n    error TokenAddressIsTheSame();\\r\\n\\r\\n    IERC20 public token;\\r\\n\\r\\n    constructor(IERC20 _token) {\\r\\n        token = _token;\\r\\n    }\\r\\n\\r\\n    function _replaceToken(IERC20 newToken) internal virtual {\\r\\n        if(address(newToken) == address(0)) revert InvalidTokenAddress();\\r\\n        if(newToken == token) revert TokenAddressIsTheSame();\\r\\n        token = newToken;\\r\\n    }\\r\\n\\r\\n    function _getToken() internal view returns(IERC20 _token) {\\r\\n        _token = token;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x093df2e4c097473cb49ac6a815020237c4cc71f209f48eefe7de9cc030788d59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200293f3803806200293f83398101604081905262000034916200011d565b828282808383816001600160a01b0381166200006a57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007581620000b4565b50600180546001600160a01b039283166001600160a01b0319918216179091556007805494909216931692909217909155506200017195505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200011a57600080fd5b50565b6000806000606084860312156200013357600080fd5b8351620001408162000104565b6020850151909350620001538162000104565b6040850151909250620001668162000104565b809150509250925092565b6127be80620001816000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638e005553116100c3578063d084b9af1161007c578063d084b9af146103c3578063d8d8f686146103d6578063f09734ec146103e9578063f2fde38b146103fc578063fc0c546a1461040f578063ff638eb91461042257600080fd5b80638e005553146103395780638f26fd321461034c5780639609e4e01461035f5780639d67229414610372578063c1be667714610385578063c1d27947146103b057600080fd5b80634ff531b6116101155780634ff531b61461021157806354346b661461023f578063553c305a146102e6578063715018a6146102f957806383d0f8d2146103015780638da5cb5b1461031457600080fd5b806302a501a11461015d5780631087ebf314610199578063144fa6d7146101b05780631cb77205146101c5578063435daefc146101e55780634eadf298146101ee575b600080fd5b61017061016b36600461220f565b610435565b6040805182516001600160a01b0316815260209283015192810192909252015b60405180910390f35b6101a260035481565b604051908152602001610190565b6101c36101be36600461223d565b61047c565b005b6101a26101d336600461220f565b60096020526000908152604090205481565b6101a260025481565b6102016101fc36600461233f565b610490565b6040519015158152602001610190565b61022461021f36600461223d565b6104b1565b60408051825181526020928301519281019290925201610190565b6102a461024d3660046123c9565b600860209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460059095015460ff948516959394929391926001600160a01b03821691600160a01b90041687565b604080519715158852602088019690965294860193909352606085019190915260808401526001600160a01b031660a0830152151560c082015260e001610190565b6102016102f436600461220f565b610506565b6101c3610540565b61017061030f36600461220f565b610554565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610190565b6101c36103473660046123eb565b610571565b61020161035a366004612406565b610582565b61020161036d36600461220f565b6105a3565b6101a261038036600461220f565b6105d2565b6101a26103933660046124aa565b600a60209081526000928352604080842090915290825290205481565b6102016103be3660046124d6565b6105dd565b6102016103d136600461251d565b6108c3565b6101c36103e436600461223d565b610aff565b6101a26103f736600461251d565b610b7f565b6101c361040a36600461223d565b610b92565b600754610321906001600160a01b031681565b61020161043036600461251d565b610bcd565b604080518082019091526000808252602082015250600090815260056020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b610484610e76565b61048d81610ea3565b50565b60006104a487878789518888886001610f1b565b5060019695505050505050565b604080518082018252600080825260208083018290528351808501855282815281018290526001600160a01b038516825260068152908390208351808501909452805484526001015490830152905b92915050565b6000818152600460209081526040808320838052909152812060050154819060ff1660018111156105395761053961254d565b1492915050565b610548610e76565b6105526000611249565b565b604080518082019091526000808252602082015261050082610435565b610579610e76565b61ffff16600255565b6000610595888888888888886000610f1b565b506001979650505050505050565b60006105b0826000611299565b60400151516105cb8360009081526009602052604090205490565b1092915050565b60006105008261143c565b6000806105eb846000611299565b905060006106138460008151811061060557610605612563565b602002602001015186611495565b905061062184866000611534565b5060608201516020018051860190526000826040015160a00151600581111561064c5761064c61254d565b1461066a5760405163764e1ce760e11b815260040160405180910390fd5b60018451111561068d57604051638ae4b6fd60e01b815260040160405180910390fd5b6060820151602001516007546001600160a01b03166370a082316106b088610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190612579565b101561073857604051631895d44960e21b815260040160405180910390fd5b600082604001516080015160018111156107545761075461254d565b0361079f5780511561079a5760405162461bcd60e51b815260206004820152600a602482015269155cd95c88195e1a5cdd60b21b60448201526064015b60405180910390fd5b6107f0565b805180156107af57508060c00151155b6107f05760405162461bcd60e51b8152602060048201526012602482015271416c72656164792073656e742071756f746160701b6044820152606401610791565b6107f98561168f565b610862856040518060e00160405280600115158152602001600081526020016000815260200160008152602001600081526020018760008151811061084057610840612563565b60200260200101516001600160a01b03168152602001600115158152506116b6565b60408201515161087e8660009081526009602052604090205490565b036108ac57604082810151600160a090910152600086815260096020529081205581516108ac90864261177b565b6108b8828660006117f5565b506001949350505050565b6000806108d1846000611299565b905060006108df8486611495565b90506002826040015160a0015160058111156108fd576108fd61254d565b1461091b5760405163bd13e09360e01b815260040160405180910390fd5b6000610927868661195a565b90508060000361094a57604051633c74e66760e01b815260040160405180910390fd5b6000606083018190526040848101515188835260096020529120541480610a5e57604084015151606085015151610980916119c0565b6060850180516020908101929092525101516007546001600160a01b03166370a082316109ac8a610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190612579565b1015610a345760405163589af56f60e11b815260040160405180910390fd5b6040840151600160a090910152610a4d6000884261177b565b610a59848860006117f5565b610af5565b6040840151600560a090910152610a77848860016117f5565b6000878152600460208181526040808420848052909152822080546001600160a01b031990811682556001820180549091169055600281018390556003810183905590810182905560058101805462ffffff1916905560068101829055600781018290556008810182905560098101829055600a8101829055600b01555b6104a487846116b6565b610b07610e76565b6001600160a01b038116610b2e57604051635697b36760e01b815260040160405180910390fd5b6001546001600160a01b0390811690821603610b5d57604051630241da2360e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b8b838361195a565b9392505050565b610b9a610e76565b6001600160a01b038116610bc457604051631e4fbdf760e01b815260006004820152602401610791565b61048d81611249565b600080610bdb846000611299565b90506000610be8856119cc565b90506000610bf586610435565b5160408301516001600160a01b03909116319150610c1590610e106125a8565b4267ffffffffffffffff161115610c56578160a001516001600160a01b0316856001600160a01b031614610c5157610c4e868684611a5b565b91505b610c8c565b8160a001516001600160a01b0316856001600160a01b031614610c8c576040516328c3314560e11b815260040160405180910390fd5b6001836040015160a001516005811115610ca857610ca861254d565b14610cc657604051631b7dbc4160e31b815260040160405180910390fd5b6060830151602001516007546001600160a01b03166370a08231610ce989610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190612579565b1015610d7157604051631895d44960e21b815260040160405180910390fd5b6060830151602081015160408501515191519091610d8f91906119c0565b1015610dae5760405163080fe36d60e31b815260040160405180910390fd5b610dbc8260a0015187611de1565b6000610ddb600254856060015160200151611e0d90919063ffffffff16565b9050610de68761143c565b60808401819052821015610e0d57604051633a23d82560e01b815260040160405180910390fd5b606084015160200151610e209082611e19565b60608481019190915260a0808501516001600160a01b031660208781019190915291860151600092019190915260408501516002910152610e6187846116b6565b610e6d848860006117f5565b6104a48761168f565b6000546001600160a01b031633146105525760405163118cdaa760e01b8152336004820152602401610791565b6001600160a01b038116610eca57604051630f58058360e11b815260040160405180910390fd5b6007546001600160a01b0390811690821603610ef9576040516372b0ef7f60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600187511115610f3e576040516367e6d2c160e01b815260040160405180910390fd5b6000610f6588888a600081518110610f5857610f58612563565b6020026020010151611534565b90506000610f7288610435565b516001600160a01b0316036110a6576001600160a01b038916610fa857604051633f695ffd60e01b815260040160405180910390fd5b86610fbb6007546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038c8116600483015291909116906370a0823190602401602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612579565b101561105f5760405162461bcd60e51b81526020600482015260076024820152664c6f77204c697160c81b6044820152606401610791565b6040805180820182526001600160a01b03808c168252602080830185815260008c81526005909252939020915182546001600160a01b031916911617815590516001909101555b60016110b3886001611299565b604001516060015160018111156110cc576110cc61254d565b036110ea57604051630fbea31360e41b815260040160405180910390fd5b60648362ffffff161015611111576040516361ae5e4360e01b815260040160405180910390fd5b61ffff8416158061112757506102d08461ffff16115b156111455760405163014c22b760e21b815260040160405180910390fd5b6112356040518060a001604052808a60008151811061116657611166612563565b60200260200101516001600160a01b0316815260200160006001600160a01b031681526020016040518060c001604052808a60ff1681526020018762ffffff16815260200188610e100261ffff1681526020016001808111156111cb576111cb61254d565b81526020018660018111156111e2576111e261254d565b81526020016000815250815260200160405180606001604052808b81526020018b8152602001611210611e25565b9052815260200161122b60ff8a168b028961ffff8a16611e3f565b90528860006117f5565b61123e8761168f565b505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112a1612109565b6000838152600460205260408120908360018111156112c2576112c261254d565b60018111156112d3576112d361254d565b81526020808201929092526040908101600020815160a08101835281546001600160a01b03908116825260018084015490911682860152835160c081018552600284018054825260038501549682019690965260048401548186015260058401549295939486019390929091606084019160ff16908111156113575761135761254d565b60018111156113685761136861254d565b81526020016003820160019054906101000a900460ff1660018111156113905761139061254d565b60018111156113a1576113a161254d565b81526020016003820160029054906101000a900460ff1660058111156113c9576113c961254d565b60058111156113da576113da61254d565b90525081526040805160608082018352600685015482526007850154602080840191909152600886015483850152808501929092528251908101835260098501548152600a85015491810191909152600b909301548382015201529392505050565b60008061144a836000611299565b9050610b8b816040015160200151826060015160200151604051806040016040528061147b678ac7230489e8000090565b6001600160801b0316815260126020909101529190611f2b565b61149d61217f565b506001600160a01b039182166000908152600a602090815260408083209383529281528282205460088252838320908352815290829020825160e081018452815460ff9081161515825260018301549382019390935260028201549381019390935260038101546060840152600481015460808401526005015492831660a0830152600160a01b909204909116151560c082015290565b8251600090815b8181101561168657600086828151811061155757611557612563565b60200260200101519050846001600160a01b0316816001600160a01b0316036115c55783816040516020016115a892919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120935061160e565b60408051602081018690526bffffffffffffffffffffffff19606084901b1691810191909152605481018790526074016040516020818303038152906040528051906020012093505b61161b8160006002611fbb565b61167d866040518060e00160405280886001600160a01b0316856001600160a01b0316141515815260200160008152602001600081526020016000815260200160008152602001846001600160a01b03168152602001600115158152506116b6565b5060010161153b565b50509392505050565b60008181526009602052604081208054600192906116ae9084906125a8565b909155505050565b6000828152600960205260409020546116d08160016125a8565b6000848152600960209081526040808320939093556008815282822084835281528282208551815490151560ff19909116178155858201516001820155858401516002820155606086015160038201556080860151600482015560a08601516005909101805460c0909701511515600160a01b026001600160a81b03199097166001600160a01b0390921691821796909617909555938152600a845281812094815293909252912055565b60006001600160a01b0384166117a057506000828152600960205260409020546117c6565b506001600160a01b0383166000908152600a602090815260408083208584529091529020545b600092835260086020908152604080852092855291905290912067ffffffffffffffff90911660029091015550565b600082815260046020526040812084918360018111156118175761181761254d565b60018111156118285761182861254d565b81526020808201929092526040908101600020835181546001600160a01b03199081166001600160a01b039283161783558585015160018085018054909316919093161790558483015180516002840190815594810151600384015592830151600483015560608301516005830180549395939192909160ff19169083818111156118b5576118b561254d565b0217905550608082015160038201805461ff0019166101008360018111156118df576118df61254d565b021790555060a082015160038201805462ff000019166201000083600581111561190b5761190b61254d565b02179055505050606082015180516006830155602080820151600784015560409182015160088401556080909301518051600984015592830151600a8301559190910151600b90910155505050565b600080611968846000611299565b60800151602001519050600061197e8486611495565b90506119b76119ac6119a583604001516119954290565b67ffffffffffffffff1690611e19565b84906119c0565b60608301519061202b565b95945050505050565b6000610b8b82846125bb565b6119d461217f565b5060009081526009602090815260408083205460088352818420908452825291829020825160e081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600501546001600160a01b03811660a0840152600160a01b900416151560c082015290565b611a6361217f565b6000600a6000856001600160a01b03166001600160a01b0316815260200190815260200160002060008681526020019081526020016000205490506000600a60008560a001516001600160a01b03166001600160a01b0316815260200190815260200160002060008781526020019081526020016000205490506008600087815260200190815260200160002060008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016005820160149054906101000a900460ff1615151515815250509250836040015183604001818152505060008460400181815250508260086000888152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff0219169083151502179055509050508360086000888152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555090505080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002060008881526020019081526020016000208190555081600a60008660a001516001600160a01b03166001600160a01b0316815260200190815260200160002060008881526020019081526020016000208190555083604001516008600088815260200190815260200160002060008481526020019081526020016000206002018190555050509392505050565b611deb8282611495565b51611e0957604051633381e38f60e01b815260040160405180910390fd5b5050565b6000610b8b8383612037565b6000610b8b82846125d2565b600380549081906000611e37836125e5565b919050555090565b611e6360405180606001604052806000815260200160008152602001600081525090565b611e8760405180606001604052806000815260200160008152602001600081525090565b62278d0062ffffff84161115611eed5760405162461bcd60e51b815260206004820152602560248201527f5574696c733a2046756c6c447572206f72204475724f6643686f696365206f6560448201526472666c6f7760d81b6064820152608401610791565b611ef78585612037565b80825215611f23578051611f1d9062ffffff851690611f179060016119c0565b906120de565b60208201525b949350505050565b6000606462ffffff8416811115611f545760405162e41c4b60e31b815260040160405180910390fd5b6000611f6662ffffff861660646119c0565b90506000611f9687600001516001600160801b0316611f178960200151600a611f8f91906126e2565b88906119c0565b9050611fb0612710611f178365ffffffffffff86166119c0565b979650505050505050565b8115611fef576001600160a01b03831660009081526006602052604081208054849290611fe99084906125a8565b90915550505b8015612026576001600160a01b038316600090815260066020526040812060010180548392906120209084906125a8565b90915550505b505050565b6000610b8b82846125a8565b600061271061ffff8316158061204b575083155b1561205a576000915050610500565b61209761ffff80168461ffff161060405180604001604052806011815260200170496e746572657374206f766572666c6f7760781b8152506120ea565b6120bf8161ffff168511604051806060016040528060268152602001612763602691396120ea565b611f238161ffff16611f178561ffff16876119c090919063ffffffff16565b6000610b8b82846126f1565b80826120265760405162461bcd60e51b81526004016107919190612713565b6040805160a081018252600080825260208201529081016121286121c9565b815260200161215160405180606001604052806000815260200160008152602001600081525090565b815260200161217a60405180606001604052806000815260200160008152602001600081525090565b905290565b6040518060e001604052806000151581526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b6040518060c00160405280600081526020016000815260200160008152602001600060018111156121fc576121fc61254d565b8152602001600081526020016000905290565b60006020828403121561222157600080fd5b5035919050565b6001600160a01b038116811461048d57600080fd5b60006020828403121561224f57600080fd5b8135610b8b81612228565b803561226581612228565b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261229157600080fd5b8135602067ffffffffffffffff808311156122ae576122ae61226a565b8260051b604051601f19603f830116810181811084821117156122d3576122d361226a565b60405293845260208187018101949081019250878511156122f357600080fd5b6020870191505b84821015611fb05761230b8261225a565b835291830191908301906122fa565b803561ffff8116811461226557600080fd5b803562ffffff8116811461226557600080fd5b60008060008060008060c0878903121561235857600080fd5b863561236381612228565b9550602087013567ffffffffffffffff81111561237f57600080fd5b61238b89828a01612280565b955050604087013593506123a16060880161231a565b92506123af6080880161231a565b91506123bd60a0880161232c565b90509295509295509295565b600080604083850312156123dc57600080fd5b50508035926020909101359150565b6000602082840312156123fd57600080fd5b610b8b8261231a565b600080600080600080600060e0888a03121561242157600080fd5b873561242c81612228565b9650602088013567ffffffffffffffff81111561244857600080fd5b6124548a828b01612280565b96505060408801359450606088013560ff8116811461247257600080fd5b93506124806080890161231a565b925061248e60a0890161231a565b915061249c60c0890161232c565b905092959891949750929550565b600080604083850312156124bd57600080fd5b82356124c881612228565b946020939093013593505050565b600080604083850312156124e957600080fd5b82359150602083013567ffffffffffffffff81111561250757600080fd5b61251385828601612280565b9150509250929050565b6000806040838503121561253057600080fd5b82359150602083013561254281612228565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561258b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561050057610500612592565b808202811582820484141761050057610500612592565b8181038181111561050057610500612592565b6000600182016125f7576125f7612592565b5060010190565b600181815b8085111561263957816000190482111561261f5761261f612592565b8085161561262c57918102915b93841c9390800290612603565b509250929050565b60008261265057506001610500565b8161265d57506000610500565b8160018114612673576002811461267d57612699565b6001915050610500565b60ff84111561268e5761268e612592565b50506001821b610500565b5060208310610133831016604e8410600b84101617156126bc575081810a610500565b6126c683836125fe565b80600019048211156126da576126da612592565b029392505050565b6000610b8b60ff841683612641565b60008261270e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835180602085015260005b8181101561274157858101830151858201604001528201612725565b506000604082860101526040601f19601f830116850101925050509291505056fe5072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a2646970667358221220f75c4120fa8d1a4ccc4d90a85cf844ef5645df33f42912838c8f9469a0dd2b7464736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638e005553116100c3578063d084b9af1161007c578063d084b9af146103c3578063d8d8f686146103d6578063f09734ec146103e9578063f2fde38b146103fc578063fc0c546a1461040f578063ff638eb91461042257600080fd5b80638e005553146103395780638f26fd321461034c5780639609e4e01461035f5780639d67229414610372578063c1be667714610385578063c1d27947146103b057600080fd5b80634ff531b6116101155780634ff531b61461021157806354346b661461023f578063553c305a146102e6578063715018a6146102f957806383d0f8d2146103015780638da5cb5b1461031457600080fd5b806302a501a11461015d5780631087ebf314610199578063144fa6d7146101b05780631cb77205146101c5578063435daefc146101e55780634eadf298146101ee575b600080fd5b61017061016b36600461220f565b610435565b6040805182516001600160a01b0316815260209283015192810192909252015b60405180910390f35b6101a260035481565b604051908152602001610190565b6101c36101be36600461223d565b61047c565b005b6101a26101d336600461220f565b60096020526000908152604090205481565b6101a260025481565b6102016101fc36600461233f565b610490565b6040519015158152602001610190565b61022461021f36600461223d565b6104b1565b60408051825181526020928301519281019290925201610190565b6102a461024d3660046123c9565b600860209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460059095015460ff948516959394929391926001600160a01b03821691600160a01b90041687565b604080519715158852602088019690965294860193909352606085019190915260808401526001600160a01b031660a0830152151560c082015260e001610190565b6102016102f436600461220f565b610506565b6101c3610540565b61017061030f36600461220f565b610554565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610190565b6101c36103473660046123eb565b610571565b61020161035a366004612406565b610582565b61020161036d36600461220f565b6105a3565b6101a261038036600461220f565b6105d2565b6101a26103933660046124aa565b600a60209081526000928352604080842090915290825290205481565b6102016103be3660046124d6565b6105dd565b6102016103d136600461251d565b6108c3565b6101c36103e436600461223d565b610aff565b6101a26103f736600461251d565b610b7f565b6101c361040a36600461223d565b610b92565b600754610321906001600160a01b031681565b61020161043036600461251d565b610bcd565b604080518082019091526000808252602082015250600090815260056020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b610484610e76565b61048d81610ea3565b50565b60006104a487878789518888886001610f1b565b5060019695505050505050565b604080518082018252600080825260208083018290528351808501855282815281018290526001600160a01b038516825260068152908390208351808501909452805484526001015490830152905b92915050565b6000818152600460209081526040808320838052909152812060050154819060ff1660018111156105395761053961254d565b1492915050565b610548610e76565b6105526000611249565b565b604080518082019091526000808252602082015261050082610435565b610579610e76565b61ffff16600255565b6000610595888888888888886000610f1b565b506001979650505050505050565b60006105b0826000611299565b60400151516105cb8360009081526009602052604090205490565b1092915050565b60006105008261143c565b6000806105eb846000611299565b905060006106138460008151811061060557610605612563565b602002602001015186611495565b905061062184866000611534565b5060608201516020018051860190526000826040015160a00151600581111561064c5761064c61254d565b1461066a5760405163764e1ce760e11b815260040160405180910390fd5b60018451111561068d57604051638ae4b6fd60e01b815260040160405180910390fd5b6060820151602001516007546001600160a01b03166370a082316106b088610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190612579565b101561073857604051631895d44960e21b815260040160405180910390fd5b600082604001516080015160018111156107545761075461254d565b0361079f5780511561079a5760405162461bcd60e51b815260206004820152600a602482015269155cd95c88195e1a5cdd60b21b60448201526064015b60405180910390fd5b6107f0565b805180156107af57508060c00151155b6107f05760405162461bcd60e51b8152602060048201526012602482015271416c72656164792073656e742071756f746160701b6044820152606401610791565b6107f98561168f565b610862856040518060e00160405280600115158152602001600081526020016000815260200160008152602001600081526020018760008151811061084057610840612563565b60200260200101516001600160a01b03168152602001600115158152506116b6565b60408201515161087e8660009081526009602052604090205490565b036108ac57604082810151600160a090910152600086815260096020529081205581516108ac90864261177b565b6108b8828660006117f5565b506001949350505050565b6000806108d1846000611299565b905060006108df8486611495565b90506002826040015160a0015160058111156108fd576108fd61254d565b1461091b5760405163bd13e09360e01b815260040160405180910390fd5b6000610927868661195a565b90508060000361094a57604051633c74e66760e01b815260040160405180910390fd5b6000606083018190526040848101515188835260096020529120541480610a5e57604084015151606085015151610980916119c0565b6060850180516020908101929092525101516007546001600160a01b03166370a082316109ac8a610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190612579565b1015610a345760405163589af56f60e11b815260040160405180910390fd5b6040840151600160a090910152610a4d6000884261177b565b610a59848860006117f5565b610af5565b6040840151600560a090910152610a77848860016117f5565b6000878152600460208181526040808420848052909152822080546001600160a01b031990811682556001820180549091169055600281018390556003810183905590810182905560058101805462ffffff1916905560068101829055600781018290556008810182905560098101829055600a8101829055600b01555b6104a487846116b6565b610b07610e76565b6001600160a01b038116610b2e57604051635697b36760e01b815260040160405180910390fd5b6001546001600160a01b0390811690821603610b5d57604051630241da2360e31b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b8b838361195a565b9392505050565b610b9a610e76565b6001600160a01b038116610bc457604051631e4fbdf760e01b815260006004820152602401610791565b61048d81611249565b600080610bdb846000611299565b90506000610be8856119cc565b90506000610bf586610435565b5160408301516001600160a01b03909116319150610c1590610e106125a8565b4267ffffffffffffffff161115610c56578160a001516001600160a01b0316856001600160a01b031614610c5157610c4e868684611a5b565b91505b610c8c565b8160a001516001600160a01b0316856001600160a01b031614610c8c576040516328c3314560e11b815260040160405180910390fd5b6001836040015160a001516005811115610ca857610ca861254d565b14610cc657604051631b7dbc4160e31b815260040160405180910390fd5b6060830151602001516007546001600160a01b03166370a08231610ce989610435565b5160405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190612579565b1015610d7157604051631895d44960e21b815260040160405180910390fd5b6060830151602081015160408501515191519091610d8f91906119c0565b1015610dae5760405163080fe36d60e31b815260040160405180910390fd5b610dbc8260a0015187611de1565b6000610ddb600254856060015160200151611e0d90919063ffffffff16565b9050610de68761143c565b60808401819052821015610e0d57604051633a23d82560e01b815260040160405180910390fd5b606084015160200151610e209082611e19565b60608481019190915260a0808501516001600160a01b031660208781019190915291860151600092019190915260408501516002910152610e6187846116b6565b610e6d848860006117f5565b6104a48761168f565b6000546001600160a01b031633146105525760405163118cdaa760e01b8152336004820152602401610791565b6001600160a01b038116610eca57604051630f58058360e11b815260040160405180910390fd5b6007546001600160a01b0390811690821603610ef9576040516372b0ef7f60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600187511115610f3e576040516367e6d2c160e01b815260040160405180910390fd5b6000610f6588888a600081518110610f5857610f58612563565b6020026020010151611534565b90506000610f7288610435565b516001600160a01b0316036110a6576001600160a01b038916610fa857604051633f695ffd60e01b815260040160405180910390fd5b86610fbb6007546001600160a01b031690565b6040516370a0823160e01b81526001600160a01b038c8116600483015291909116906370a0823190602401602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612579565b101561105f5760405162461bcd60e51b81526020600482015260076024820152664c6f77204c697160c81b6044820152606401610791565b6040805180820182526001600160a01b03808c168252602080830185815260008c81526005909252939020915182546001600160a01b031916911617815590516001909101555b60016110b3886001611299565b604001516060015160018111156110cc576110cc61254d565b036110ea57604051630fbea31360e41b815260040160405180910390fd5b60648362ffffff161015611111576040516361ae5e4360e01b815260040160405180910390fd5b61ffff8416158061112757506102d08461ffff16115b156111455760405163014c22b760e21b815260040160405180910390fd5b6112356040518060a001604052808a60008151811061116657611166612563565b60200260200101516001600160a01b0316815260200160006001600160a01b031681526020016040518060c001604052808a60ff1681526020018762ffffff16815260200188610e100261ffff1681526020016001808111156111cb576111cb61254d565b81526020018660018111156111e2576111e261254d565b81526020016000815250815260200160405180606001604052808b81526020018b8152602001611210611e25565b9052815260200161122b60ff8a168b028961ffff8a16611e3f565b90528860006117f5565b61123e8761168f565b505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112a1612109565b6000838152600460205260408120908360018111156112c2576112c261254d565b60018111156112d3576112d361254d565b81526020808201929092526040908101600020815160a08101835281546001600160a01b03908116825260018084015490911682860152835160c081018552600284018054825260038501549682019690965260048401548186015260058401549295939486019390929091606084019160ff16908111156113575761135761254d565b60018111156113685761136861254d565b81526020016003820160019054906101000a900460ff1660018111156113905761139061254d565b60018111156113a1576113a161254d565b81526020016003820160029054906101000a900460ff1660058111156113c9576113c961254d565b60058111156113da576113da61254d565b90525081526040805160608082018352600685015482526007850154602080840191909152600886015483850152808501929092528251908101835260098501548152600a85015491810191909152600b909301548382015201529392505050565b60008061144a836000611299565b9050610b8b816040015160200151826060015160200151604051806040016040528061147b678ac7230489e8000090565b6001600160801b0316815260126020909101529190611f2b565b61149d61217f565b506001600160a01b039182166000908152600a602090815260408083209383529281528282205460088252838320908352815290829020825160e081018452815460ff9081161515825260018301549382019390935260028201549381019390935260038101546060840152600481015460808401526005015492831660a0830152600160a01b909204909116151560c082015290565b8251600090815b8181101561168657600086828151811061155757611557612563565b60200260200101519050846001600160a01b0316816001600160a01b0316036115c55783816040516020016115a892919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120935061160e565b60408051602081018690526bffffffffffffffffffffffff19606084901b1691810191909152605481018790526074016040516020818303038152906040528051906020012093505b61161b8160006002611fbb565b61167d866040518060e00160405280886001600160a01b0316856001600160a01b0316141515815260200160008152602001600081526020016000815260200160008152602001846001600160a01b03168152602001600115158152506116b6565b5060010161153b565b50509392505050565b60008181526009602052604081208054600192906116ae9084906125a8565b909155505050565b6000828152600960205260409020546116d08160016125a8565b6000848152600960209081526040808320939093556008815282822084835281528282208551815490151560ff19909116178155858201516001820155858401516002820155606086015160038201556080860151600482015560a08601516005909101805460c0909701511515600160a01b026001600160a81b03199097166001600160a01b0390921691821796909617909555938152600a845281812094815293909252912055565b60006001600160a01b0384166117a057506000828152600960205260409020546117c6565b506001600160a01b0383166000908152600a602090815260408083208584529091529020545b600092835260086020908152604080852092855291905290912067ffffffffffffffff90911660029091015550565b600082815260046020526040812084918360018111156118175761181761254d565b60018111156118285761182861254d565b81526020808201929092526040908101600020835181546001600160a01b03199081166001600160a01b039283161783558585015160018085018054909316919093161790558483015180516002840190815594810151600384015592830151600483015560608301516005830180549395939192909160ff19169083818111156118b5576118b561254d565b0217905550608082015160038201805461ff0019166101008360018111156118df576118df61254d565b021790555060a082015160038201805462ff000019166201000083600581111561190b5761190b61254d565b02179055505050606082015180516006830155602080820151600784015560409182015160088401556080909301518051600984015592830151600a8301559190910151600b90910155505050565b600080611968846000611299565b60800151602001519050600061197e8486611495565b90506119b76119ac6119a583604001516119954290565b67ffffffffffffffff1690611e19565b84906119c0565b60608301519061202b565b95945050505050565b6000610b8b82846125bb565b6119d461217f565b5060009081526009602090815260408083205460088352818420908452825291829020825160e081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600501546001600160a01b03811660a0840152600160a01b900416151560c082015290565b611a6361217f565b6000600a6000856001600160a01b03166001600160a01b0316815260200190815260200160002060008681526020019081526020016000205490506000600a60008560a001516001600160a01b03166001600160a01b0316815260200190815260200160002060008781526020019081526020016000205490506008600087815260200190815260200160002060008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900460ff16151515158152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016005820160149054906101000a900460ff1615151515815250509250836040015183604001818152505060008460400181815250508260086000888152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff0219169083151502179055509050508360086000888152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160050160146101000a81548160ff02191690831515021790555090505080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002060008881526020019081526020016000208190555081600a60008660a001516001600160a01b03166001600160a01b0316815260200190815260200160002060008881526020019081526020016000208190555083604001516008600088815260200190815260200160002060008481526020019081526020016000206002018190555050509392505050565b611deb8282611495565b51611e0957604051633381e38f60e01b815260040160405180910390fd5b5050565b6000610b8b8383612037565b6000610b8b82846125d2565b600380549081906000611e37836125e5565b919050555090565b611e6360405180606001604052806000815260200160008152602001600081525090565b611e8760405180606001604052806000815260200160008152602001600081525090565b62278d0062ffffff84161115611eed5760405162461bcd60e51b815260206004820152602560248201527f5574696c733a2046756c6c447572206f72204475724f6643686f696365206f6560448201526472666c6f7760d81b6064820152608401610791565b611ef78585612037565b80825215611f23578051611f1d9062ffffff851690611f179060016119c0565b906120de565b60208201525b949350505050565b6000606462ffffff8416811115611f545760405162e41c4b60e31b815260040160405180910390fd5b6000611f6662ffffff861660646119c0565b90506000611f9687600001516001600160801b0316611f178960200151600a611f8f91906126e2565b88906119c0565b9050611fb0612710611f178365ffffffffffff86166119c0565b979650505050505050565b8115611fef576001600160a01b03831660009081526006602052604081208054849290611fe99084906125a8565b90915550505b8015612026576001600160a01b038316600090815260066020526040812060010180548392906120209084906125a8565b90915550505b505050565b6000610b8b82846125a8565b600061271061ffff8316158061204b575083155b1561205a576000915050610500565b61209761ffff80168461ffff161060405180604001604052806011815260200170496e746572657374206f766572666c6f7760781b8152506120ea565b6120bf8161ffff168511604051806060016040528060268152602001612763602691396120ea565b611f238161ffff16611f178561ffff16876119c090919063ffffffff16565b6000610b8b82846126f1565b80826120265760405162461bcd60e51b81526004016107919190612713565b6040805160a081018252600080825260208201529081016121286121c9565b815260200161215160405180606001604052806000815260200160008152602001600081525090565b815260200161217a60405180606001604052806000815260200160008152602001600081525090565b905290565b6040518060e001604052806000151581526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b6040518060c00160405280600081526020016000815260200160008152602001600060018111156121fc576121fc61254d565b8152602001600081526020016000905290565b60006020828403121561222157600080fd5b5035919050565b6001600160a01b038116811461048d57600080fd5b60006020828403121561224f57600080fd5b8135610b8b81612228565b803561226581612228565b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261229157600080fd5b8135602067ffffffffffffffff808311156122ae576122ae61226a565b8260051b604051601f19603f830116810181811084821117156122d3576122d361226a565b60405293845260208187018101949081019250878511156122f357600080fd5b6020870191505b84821015611fb05761230b8261225a565b835291830191908301906122fa565b803561ffff8116811461226557600080fd5b803562ffffff8116811461226557600080fd5b60008060008060008060c0878903121561235857600080fd5b863561236381612228565b9550602087013567ffffffffffffffff81111561237f57600080fd5b61238b89828a01612280565b955050604087013593506123a16060880161231a565b92506123af6080880161231a565b91506123bd60a0880161232c565b90509295509295509295565b600080604083850312156123dc57600080fd5b50508035926020909101359150565b6000602082840312156123fd57600080fd5b610b8b8261231a565b600080600080600080600060e0888a03121561242157600080fd5b873561242c81612228565b9650602088013567ffffffffffffffff81111561244857600080fd5b6124548a828b01612280565b96505060408801359450606088013560ff8116811461247257600080fd5b93506124806080890161231a565b925061248e60a0890161231a565b915061249c60c0890161232c565b905092959891949750929550565b600080604083850312156124bd57600080fd5b82356124c881612228565b946020939093013593505050565b600080604083850312156124e957600080fd5b82359150602083013567ffffffffffffffff81111561250757600080fd5b61251385828601612280565b9150509250929050565b6000806040838503121561253057600080fd5b82359150602083013561254281612228565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561258b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561050057610500612592565b808202811582820484141761050057610500612592565b8181038181111561050057610500612592565b6000600182016125f7576125f7612592565b5060010190565b600181815b8085111561263957816000190482111561261f5761261f612592565b8085161561262c57918102915b93841c9390800290612603565b509250929050565b60008261265057506001610500565b8161265d57506000610500565b8160018114612673576002811461267d57612699565b6001915050610500565b60ff84111561268e5761268e612592565b50506001821b610500565b5060208310610133831016604e8410600b84101617156126bc575081810a610500565b6126c683836125fe565b80600019048211156126da576126da612592565b029392505050565b6000610b8b60ff841683612641565b60008261270e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835180602085015260005b8181101561274157858101830151858201604001528201612725565b506000604082860101526040601f19601f830116850101925050509291505056fe5072696e636970616c2073686f756c642062652067726561746572207468616e203130303030a2646970667358221220f75c4120fa8d1a4ccc4d90a85cf844ef5645df33f42912838c8f9469a0dd2b7464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "_getSafe(uint256)": {
        "details": "Returns the safe information",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "getCurrentDebt(uint256,address)": {
        "details": "Return accrued debt for user up to this moment.",
        "params": {
          "unit": ": Contribution amount.",
          "user": ": Contributor."
        }
      },
      "getPoint(address)": {
        "details": "Returns the point See _getPoint"
      },
      "getSafe(uint256)": {
        "details": "Returns the safe information See _getSafe"
      },
      "isPoolAvailable(uint256)": {
        "details": "Get pool from storage",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "isPoolVacant(uint256)": {
        "details": "Check if slot is available in the pool",
        "params": {
          "unit": ": Unit contribution"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFee(uint16)": {
        "details": "Adjust fee",
        "params": {
          "newRate": ": New fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentDebt(uint256,address)": {
        "notice": "This is the total accrued debt between the date user was paid and now."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2148,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "agent",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2150,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "makerRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3180,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "pastRecords",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3188,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(UnitStatus)1535,t_struct(Pool)1557_storage))"
      },
      {
        "astId": 3290,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "safes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Safe)1543_storage)"
      },
      {
        "astId": 3110,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "points",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Point)1585_storage)"
      },
      {
        "astId": 3348,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1775"
      },
      {
        "astId": 2223,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "contributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contributor)1608_storage))"
      },
      {
        "astId": 2227,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "userCounts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2233,
        "contract": "contracts/Simplifi.sol:Simplifi",
        "label": "positions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1775": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Router)1538": {
        "encoding": "inplace",
        "label": "enum Common.Router",
        "numberOfBytes": "1"
      },
      "t_enum(Stage)1529": {
        "encoding": "inplace",
        "label": "enum Common.Stage",
        "numberOfBytes": "1"
      },
      "t_enum(Status)1532": {
        "encoding": "inplace",
        "label": "enum Common.Status",
        "numberOfBytes": "1"
      },
      "t_enum(UnitStatus)1535": {
        "encoding": "inplace",
        "label": "enum Common.UnitStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Point)1585_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Common.Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)1585_storage"
      },
      "t_mapping(t_enum(UnitStatus)1535,t_struct(Pool)1557_storage)": {
        "encoding": "mapping",
        "key": "t_enum(UnitStatus)1535",
        "label": "mapping(enum Common.UnitStatus => struct Common.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1557_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(UnitStatus)1535,t_struct(Pool)1557_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum Common.UnitStatus => struct Common.Pool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(UnitStatus)1535,t_struct(Pool)1557_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contributor)1608_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Common.Contributor))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Contributor)1608_storage)"
      },
      "t_mapping(t_uint256,t_struct(Contributor)1608_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Common.Contributor)",
        "numberOfBytes": "32",
        "value": "t_struct(Contributor)1608_storage"
      },
      "t_mapping(t_uint256,t_struct(Safe)1543_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Common.Safe)",
        "numberOfBytes": "32",
        "value": "t_struct(Safe)1543_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BigInt)1580_storage": {
        "encoding": "inplace",
        "label": "struct Common.BigInt",
        "members": [
          {
            "astId": 1575,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "unit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1577,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "currentPool",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1579,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "recordId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Contributor)1608_storage": {
        "encoding": "inplace",
        "label": "struct Common.Contributor",
        "members": [
          {
            "astId": 1595,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "isMember",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1597,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "payDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1599,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "turnTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1601,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "loan",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1603,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "colBals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1605,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "id",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1607,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "sentQuota",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Interest)1592_storage": {
        "encoding": "inplace",
        "label": "struct Common.Interest",
        "members": [
          {
            "astId": 1587,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "fullInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1589,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "intPerSec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1591,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "intPerChoiceOfDur",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LowInt)1573_storage": {
        "encoding": "inplace",
        "label": "struct Common.LowInt",
        "members": [
          {
            "astId": 1559,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "quorum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1561,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "colCoverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1563,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1566,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)1532"
          },
          {
            "astId": 1569,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "router",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(Router)1538"
          },
          {
            "astId": 1572,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "stage",
            "offset": 2,
            "slot": "3",
            "type": "t_enum(Stage)1529"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Point)1585_storage": {
        "encoding": "inplace",
        "label": "struct Common.Point",
        "members": [
          {
            "astId": 1582,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "contributor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1584,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Pool)1557_storage": {
        "encoding": "inplace",
        "label": "struct Common.Pool",
        "members": [
          {
            "astId": 1545,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1547,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1550,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "lInt",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(LowInt)1573_storage"
          },
          {
            "astId": 1553,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "bigInt",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(BigInt)1580_storage"
          },
          {
            "astId": 1556,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "interest",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(Interest)1592_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Safe)1543_storage": {
        "encoding": "inplace",
        "label": "struct Common.Safe",
        "members": [
          {
            "astId": 1540,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1542,
            "contract": "contracts/Simplifi.sol:Simplifi",
            "label": "ownerHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}